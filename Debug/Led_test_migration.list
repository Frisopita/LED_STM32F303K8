
Led_test_migration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003238  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080033c0  080033c0  000133c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033f8  080033f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080033f8  080033f8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033f8  080033f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033f8  080033f8  000133f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000108  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000118  20000118  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d03f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001734  00000000  00000000  0002d07f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  0002e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b30  00000000  00000000  0002f370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a572  00000000  00000000  0002fea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9b5  00000000  00000000  0004a412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a05c5  00000000  00000000  00057dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f838c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003184  00000000  00000000  000f83dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033a8 	.word	0x080033a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080033a8 	.word	0x080033a8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb5e 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f820 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f88a 	bl	80002ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f858 	bl	800028c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  EXTI15_10_IRQHandler_Config();
 80001dc:	f000 fa3c 	bl	8000658 <EXTI15_10_IRQHandler_Config>
  GPIO_init();
 80001e0:	f000 f980 	bl	80004e4 <GPIO_init>
  TIM_Init();
 80001e4:	f000 f8ce 	bl	8000384 <TIM_Init>
  generate_Dimmer();
 80001e8:	f000 f96e 	bl	80004c8 <generate_Dimmer>
  /* USER CODE END 2 */
  // led 1
  while (cont <32)
 80001ec:	e00a      	b.n	8000204 <main+0x3c>
  {
	  LED_CTRL_vfnChangeIntensity();
 80001ee:	f000 fa5f 	bl	80006b0 <LED_CTRL_vfnChangeIntensity>
	  HAL_Delay(1000);
 80001f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f6:	f000 fbaf 	bl	8000958 <HAL_Delay>
	  cont++;
 80001fa:	4b05      	ldr	r3, [pc, #20]	; (8000210 <main+0x48>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	3301      	adds	r3, #1
 8000200:	4a03      	ldr	r2, [pc, #12]	; (8000210 <main+0x48>)
 8000202:	6013      	str	r3, [r2, #0]
  while (cont <32)
 8000204:	4b02      	ldr	r3, [pc, #8]	; (8000210 <main+0x48>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b1f      	cmp	r3, #31
 800020a:	d9f0      	bls.n	80001ee <main+0x26>
//       //led 2
//       LED_CTRL_vfnChangeIntensity();
//       HAL_Delay(4000);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020c:	e7fe      	b.n	800020c <main+0x44>
 800020e:	bf00      	nop
 8000210:	200000c0 	.word	0x200000c0

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b090      	sub	sp, #64	; 0x40
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 f8b8 	bl	8003398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000236:	2302      	movs	r3, #2
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023a:	2301      	movs	r3, #1
 800023c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023e:	2310      	movs	r3, #16
 8000240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000242:	2300      	movs	r3, #0
 8000244:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fe76 	bl	8000f3c <HAL_RCC_OscConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000256:	f000 fa45 	bl	80006e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025a:	230f      	movs	r3, #15
 800025c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025e:	2300      	movs	r3, #0
 8000260:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fea0 	bl	8001fb8 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027e:	f000 fa31 	bl	80006e4 <Error_Handler>
  }
}
 8000282:	bf00      	nop
 8000284:	3740      	adds	r7, #64	; 0x40
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000290:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <MX_USART2_UART_Init+0x58>)
 8000292:	4a15      	ldr	r2, [pc, #84]	; (80002e8 <MX_USART2_UART_Init+0x5c>)
 8000294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000296:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <MX_USART2_UART_Init+0x58>)
 8000298:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800029c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800029e:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <MX_USART2_UART_Init+0x58>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002a4:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <MX_USART2_UART_Init+0x58>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <MX_USART2_UART_Init+0x58>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <MX_USART2_UART_Init+0x58>)
 80002b2:	220c      	movs	r2, #12
 80002b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <MX_USART2_UART_Init+0x58>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <MX_USART2_UART_Init+0x58>)
 80002be:	2200      	movs	r2, #0
 80002c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <MX_USART2_UART_Init+0x58>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <MX_USART2_UART_Init+0x58>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <MX_USART2_UART_Init+0x58>)
 80002d0:	f002 fd0a 	bl	8002ce8 <HAL_UART_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80002da:	f000 fa03 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2000002c 	.word	0x2000002c
 80002e8:	40004400 	.word	0x40004400

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 030c 	add.w	r3, r7, #12
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000302:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <MX_GPIO_Init+0x94>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a1e      	ldr	r2, [pc, #120]	; (8000380 <MX_GPIO_Init+0x94>)
 8000308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800030c:	6153      	str	r3, [r2, #20]
 800030e:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <MX_GPIO_Init+0x94>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_GPIO_Init+0x94>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	4a18      	ldr	r2, [pc, #96]	; (8000380 <MX_GPIO_Init+0x94>)
 8000320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000324:	6153      	str	r3, [r2, #20]
 8000326:	4b16      	ldr	r3, [pc, #88]	; (8000380 <MX_GPIO_Init+0x94>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2108      	movs	r1, #8
 8000336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033a:	f000 fde7 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800033e:	2308      	movs	r3, #8
 8000340:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000342:	2301      	movs	r3, #1
 8000344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034a:	2300      	movs	r3, #0
 800034c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800034e:	f107 030c 	add.w	r3, r7, #12
 8000352:	4619      	mov	r1, r3
 8000354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000358:	f000 fc66 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 800035c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800036a:	f107 030c 	add.w	r3, r7, #12
 800036e:	4619      	mov	r1, r3
 8000370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000374:	f000 fc58 	bl	8000c28 <HAL_GPIO_Init>

}
 8000378:	bf00      	nop
 800037a:	3720      	adds	r7, #32
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40021000 	.word	0x40021000

08000384 <TIM_Init>:

/* USER CODE BEGIN 4 */

static void TIM_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
//        Error_Handler();
//    }



	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800038a:	f107 0310 	add.w	r3, r7, #16
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
	    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
	    /* Compute the prescaler value to have TIMx counter clock equal to 10000 Hz */
	    uwPrescalerValue = (uint32_t)(SystemCoreClock / 100000) - 1;
 80003a2:	4b22      	ldr	r3, [pc, #136]	; (800042c <TIM_Init+0xa8>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	095b      	lsrs	r3, r3, #5
 80003a8:	4a21      	ldr	r2, [pc, #132]	; (8000430 <TIM_Init+0xac>)
 80003aa:	fba2 2303 	umull	r2, r3, r2, r3
 80003ae:	09db      	lsrs	r3, r3, #7
 80003b0:	3b01      	subs	r3, #1
 80003b2:	4a20      	ldr	r2, [pc, #128]	; (8000434 <TIM_Init+0xb0>)
 80003b4:	6013      	str	r3, [r2, #0]



	    /* Set TIMx instance */
	    TimHandle.Instance = TIM3;
 80003b6:	4b20      	ldr	r3, [pc, #128]	; (8000438 <TIM_Init+0xb4>)
 80003b8:	4a20      	ldr	r2, [pc, #128]	; (800043c <TIM_Init+0xb8>)
 80003ba:	601a      	str	r2, [r3, #0]
	           + Period = 10000 - 1
	           + Prescaler = (SystemCoreClock/10000) - 1
	           + ClockDivision = 0
	           + Counter direction = Up
	     */
	    TimHandle.Init.Period            = 10 - 1; //10 us
 80003bc:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <TIM_Init+0xb4>)
 80003be:	2209      	movs	r2, #9
 80003c0:	60da      	str	r2, [r3, #12]
	    TimHandle.Init.Prescaler         = uwPrescalerValue;
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <TIM_Init+0xb0>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <TIM_Init+0xb4>)
 80003c8:	6053      	str	r3, [r2, #4]
	    TimHandle.Init.ClockDivision     = 0;
 80003ca:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <TIM_Init+0xb4>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
	    TimHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80003d0:	4b19      	ldr	r3, [pc, #100]	; (8000438 <TIM_Init+0xb4>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
	    TimHandle.Init.RepetitionCounter = 0;
 80003d6:	4b18      	ldr	r3, [pc, #96]	; (8000438 <TIM_Init+0xb4>)
 80003d8:	2200      	movs	r2, #0
 80003da:	615a      	str	r2, [r3, #20]



	    if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 80003dc:	4816      	ldr	r0, [pc, #88]	; (8000438 <TIM_Init+0xb4>)
 80003de:	f002 f821 	bl	8002424 <HAL_TIM_Base_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <TIM_Init+0x68>
	    {
	        /* Initialization Error */
	        Error_Handler();
 80003e8:	f000 f97c 	bl	80006e4 <Error_Handler>
	    }



	    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f0:	613b      	str	r3, [r7, #16]
	    if (HAL_TIM_ConfigClockSource(&TimHandle, &sClockSourceConfig) != HAL_OK)
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	4619      	mov	r1, r3
 80003f8:	480f      	ldr	r0, [pc, #60]	; (8000438 <TIM_Init+0xb4>)
 80003fa:	f002 f9e6 	bl	80027ca <HAL_TIM_ConfigClockSource>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <TIM_Init+0x84>
	    {
	        Error_Handler();
 8000404:	f000 f96e 	bl	80006e4 <Error_Handler>
	    }



	    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000408:	2300      	movs	r3, #0
 800040a:	607b      	str	r3, [r7, #4]
	    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
	    if (HAL_TIMEx_MasterConfigSynchronization(&TimHandle, &sMasterConfig) != HAL_OK)
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	4619      	mov	r1, r3
 8000414:	4808      	ldr	r0, [pc, #32]	; (8000438 <TIM_Init+0xb4>)
 8000416:	f002 fbdb 	bl	8002bd0 <HAL_TIMEx_MasterConfigSynchronization>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <TIM_Init+0xa0>
	    {
	        Error_Handler();
 8000420:	f000 f960 	bl	80006e4 <Error_Handler>
	    }
}
 8000424:	bf00      	nop
 8000426:	3720      	adds	r7, #32
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000004 	.word	0x20000004
 8000430:	0a7c5ac5 	.word	0x0a7c5ac5
 8000434:	20000110 	.word	0x20000110
 8000438:	200000c4 	.word	0x200000c4
 800043c:	40000400 	.word	0x40000400

08000440 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]



    if(htim->Instance==TIM2)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000450:	d10f      	bne.n	8000472 <HAL_TIM_Base_MspInit+0x32>



        /* USER CODE END TIM2_MspInit 0 */
        /* TIM2 clock enable */
        __HAL_RCC_TIM2_CLK_ENABLE();
 8000452:	4b16      	ldr	r3, [pc, #88]	; (80004ac <HAL_TIM_Base_MspInit+0x6c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a15      	ldr	r2, [pc, #84]	; (80004ac <HAL_TIM_Base_MspInit+0x6c>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b13      	ldr	r3, [pc, #76]	; (80004ac <HAL_TIM_Base_MspInit+0x6c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]



        /* NVIC configuration for DMA transfer complete interrupt */
        // HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
        HAL_NVIC_EnableIRQ( TIM2_IRQn );
 800046a:	201c      	movs	r0, #28
 800046c:	f000 fbb3 	bl	8000bd6 <HAL_NVIC_EnableIRQ>


        HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
        HAL_NVIC_DisableIRQ(TIM3_IRQn);
    }
}
 8000470:	e018      	b.n	80004a4 <HAL_TIM_Base_MspInit+0x64>
    else if(htim->Instance == TIM3)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <HAL_TIM_Base_MspInit+0x70>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d113      	bne.n	80004a4 <HAL_TIM_Base_MspInit+0x64>
        __HAL_RCC_TIM3_CLK_ENABLE();
 800047c:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <HAL_TIM_Base_MspInit+0x6c>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <HAL_TIM_Base_MspInit+0x6c>)
 8000482:	f043 0302 	orr.w	r3, r3, #2
 8000486:	61d3      	str	r3, [r2, #28]
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <HAL_TIM_Base_MspInit+0x6c>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	f003 0302 	and.w	r3, r3, #2
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	68bb      	ldr	r3, [r7, #8]
        HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	2103      	movs	r1, #3
 8000498:	201d      	movs	r0, #29
 800049a:	f000 fb80 	bl	8000b9e <HAL_NVIC_SetPriority>
        HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800049e:	201d      	movs	r0, #29
 80004a0:	f000 fba7 	bl	8000bf2 <HAL_NVIC_DisableIRQ>
}
 80004a4:	bf00      	nop
 80004a6:	3710      	adds	r7, #16
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40000400 	.word	0x40000400

080004b4 <TIM3_IRQHandler>:
        /* USER CODE END TIM2_MspDeInit 1 */
    }
}

void TIM3_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80004b8:	4802      	ldr	r0, [pc, #8]	; (80004c4 <TIM3_IRQHandler+0x10>)
 80004ba:	f002 f867 	bl	800258c <HAL_TIM_IRQHandler>
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200000c4 	.word	0x200000c4

080004c8 <generate_Dimmer>:

static void generate_Dimmer(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
    /*##-2- Start the TIM Base generation in interrupt mode ####################*/
    /* Start Channel1 */
    if (HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 80004cc:	4804      	ldr	r0, [pc, #16]	; (80004e0 <generate_Dimmer+0x18>)
 80004ce:	f002 f801 	bl	80024d4 <HAL_TIM_Base_Start_IT>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <generate_Dimmer+0x14>
    {
        /* Starting Error */
        Error_Handler();
 80004d8:	f000 f904 	bl	80006e4 <Error_Handler>
    }



}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200000c4 	.word	0x200000c4

080004e4 <GPIO_init>:



static void GPIO_init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIOinit = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <GPIO_init+0x5c>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a10      	ldr	r2, [pc, #64]	; (8000540 <GPIO_init+0x5c>)
 80004fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000502:	6153      	str	r3, [r2, #20]
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <GPIO_init+0x5c>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	683b      	ldr	r3, [r7, #0]
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2108      	movs	r1, #8
 8000514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000518:	f000 fcf8 	bl	8000f0c <HAL_GPIO_WritePin>
    GPIOinit.Pin = LED_Pin;
 800051c:	2308      	movs	r3, #8
 800051e:	607b      	str	r3, [r7, #4]
    GPIOinit.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	2301      	movs	r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
    GPIOinit.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]
    GPIOinit.Speed = GPIO_SPEED_LOW;
 8000528:	2300      	movs	r3, #0
 800052a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIOinit);
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4619      	mov	r1, r3
 8000530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000534:	f000 fb78 	bl	8000c28 <HAL_GPIO_Init>



}
 8000538:	bf00      	nop
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000

08000544 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d101      	bne.n	800055a <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        LED_CTRL_vfnPeriodElapsedCallback();
 8000556:	f000 f807 	bl	8000568 <LED_CTRL_vfnPeriodElapsedCallback>
    }
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40000400 	.word	0x40000400

08000568 <LED_CTRL_vfnPeriodElapsedCallback>:


void LED_CTRL_vfnPeriodElapsedCallback(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    switch (led_state) {
 800056c:	4b37      	ldr	r3, [pc, #220]	; (800064c <LED_CTRL_vfnPeriodElapsedCallback+0xe4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b04      	cmp	r3, #4
 8000572:	d864      	bhi.n	800063e <LED_CTRL_vfnPeriodElapsedCallback+0xd6>
 8000574:	a201      	add	r2, pc, #4	; (adr r2, 800057c <LED_CTRL_vfnPeriodElapsedCallback+0x14>)
 8000576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800057a:	bf00      	nop
 800057c:	08000591 	.word	0x08000591
 8000580:	080005bd 	.word	0x080005bd
 8000584:	08000617 	.word	0x08000617
 8000588:	080005e9 	.word	0x080005e9
 800058c:	0800062b 	.word	0x0800062b
        case LED_OFF:
        {
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2108      	movs	r1, #8
 8000594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000598:	f000 fcb8 	bl	8000f0c <HAL_GPIO_WritePin>
            led_delay--;
 800059c:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <LED_CTRL_vfnPeriodElapsedCallback+0xe8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	4a2b      	ldr	r2, [pc, #172]	; (8000650 <LED_CTRL_vfnPeriodElapsedCallback+0xe8>)
 80005a4:	6013      	str	r3, [r2, #0]
            if(led_delay == 0)
 80005a6:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <LED_CTRL_vfnPeriodElapsedCallback+0xe8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d149      	bne.n	8000642 <LED_CTRL_vfnPeriodElapsedCallback+0xda>
            {
                led_delay = 3;
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <LED_CTRL_vfnPeriodElapsedCallback+0xe8>)
 80005b0:	2203      	movs	r2, #3
 80005b2:	601a      	str	r2, [r3, #0]
                led_state = LED_ON_START;
 80005b4:	4b25      	ldr	r3, [pc, #148]	; (800064c <LED_CTRL_vfnPeriodElapsedCallback+0xe4>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]
            }



            break;
 80005ba:	e042      	b.n	8000642 <LED_CTRL_vfnPeriodElapsedCallback+0xda>
        }
        case LED_ON_START:
        {
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2108      	movs	r1, #8
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f000 fca2 	bl	8000f0c <HAL_GPIO_WritePin>
            led_delay--;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <LED_CTRL_vfnPeriodElapsedCallback+0xe8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3b01      	subs	r3, #1
 80005ce:	4a20      	ldr	r2, [pc, #128]	; (8000650 <LED_CTRL_vfnPeriodElapsedCallback+0xe8>)
 80005d0:	6013      	str	r3, [r2, #0]
            if(led_delay == 0)
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <LED_CTRL_vfnPeriodElapsedCallback+0xe8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d135      	bne.n	8000646 <LED_CTRL_vfnPeriodElapsedCallback+0xde>
            {
                led_delay = 100;
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <LED_CTRL_vfnPeriodElapsedCallback+0xe8>)
 80005dc:	2264      	movs	r2, #100	; 0x64
 80005de:	601a      	str	r2, [r3, #0]
                led_state = LED_DIM_OFF;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <LED_CTRL_vfnPeriodElapsedCallback+0xe4>)
 80005e2:	2203      	movs	r2, #3
 80005e4:	701a      	strb	r2, [r3, #0]
            }
            //BSP_LED_Off(LED1);



            break;
 80005e6:	e02e      	b.n	8000646 <LED_CTRL_vfnPeriodElapsedCallback+0xde>
        }
        case LED_DIM_OFF:
        {
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2108      	movs	r1, #8
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f000 fc8c 	bl	8000f0c <HAL_GPIO_WritePin>
            //BSP_LED_Off(LED1);
            if(led_dim == 0)
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <LED_CTRL_vfnPeriodElapsedCallback+0xec>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d103      	bne.n	8000604 <LED_CTRL_vfnPeriodElapsedCallback+0x9c>
            {
                led_state = LED_ON;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <LED_CTRL_vfnPeriodElapsedCallback+0xe4>)
 80005fe:	2204      	movs	r2, #4
 8000600:	701a      	strb	r2, [r3, #0]
            else
            {
                led_state = LED_DIM_ON;
                led_dim--;
            }
            break;
 8000602:	e021      	b.n	8000648 <LED_CTRL_vfnPeriodElapsedCallback+0xe0>
                led_state = LED_DIM_ON;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <LED_CTRL_vfnPeriodElapsedCallback+0xe4>)
 8000606:	2202      	movs	r2, #2
 8000608:	701a      	strb	r2, [r3, #0]
                led_dim--;
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <LED_CTRL_vfnPeriodElapsedCallback+0xec>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3b01      	subs	r3, #1
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <LED_CTRL_vfnPeriodElapsedCallback+0xec>)
 8000612:	6013      	str	r3, [r2, #0]
            break;
 8000614:	e018      	b.n	8000648 <LED_CTRL_vfnPeriodElapsedCallback+0xe0>
        }
        case LED_DIM_ON:
        {
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2108      	movs	r1, #8
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f000 fc75 	bl	8000f0c <HAL_GPIO_WritePin>
            //BSP_LED_On(LED1);
            led_state = LED_DIM_OFF;
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <LED_CTRL_vfnPeriodElapsedCallback+0xe4>)
 8000624:	2203      	movs	r2, #3
 8000626:	701a      	strb	r2, [r3, #0]
            break;
 8000628:	e00e      	b.n	8000648 <LED_CTRL_vfnPeriodElapsedCallback+0xe0>
        }
        case LED_ON:
        {
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2108      	movs	r1, #8
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f000 fc6b 	bl	8000f0c <HAL_GPIO_WritePin>
            //BSP_LED_On(LED1);
            HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8000636:	201d      	movs	r0, #29
 8000638:	f000 fadb 	bl	8000bf2 <HAL_NVIC_DisableIRQ>
            break;
 800063c:	e004      	b.n	8000648 <LED_CTRL_vfnPeriodElapsedCallback+0xe0>
        }
        default:
        {
            break;
 800063e:	bf00      	nop
 8000640:	e002      	b.n	8000648 <LED_CTRL_vfnPeriodElapsedCallback+0xe0>
            break;
 8000642:	bf00      	nop
 8000644:	e000      	b.n	8000648 <LED_CTRL_vfnPeriodElapsedCallback+0xe0>
            break;
 8000646:	bf00      	nop
        }
    }
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000b0 	.word	0x200000b0
 8000650:	20000000 	.word	0x20000000
 8000654:	200000b4 	.word	0x200000b4

08000658 <EXTI15_10_IRQHandler_Config>:



static void EXTI15_10_IRQHandler_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;



  /* Enable GPIOC clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <EXTI15_10_IRQHandler_Config+0x50>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a11      	ldr	r2, [pc, #68]	; (80006a8 <EXTI15_10_IRQHandler_Config+0x50>)
 8000664:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <EXTI15_10_IRQHandler_Config+0x50>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]



  /* Configure PC.13 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000676:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800067a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4619      	mov	r1, r3
 800068a:	4808      	ldr	r0, [pc, #32]	; (80006ac <EXTI15_10_IRQHandler_Config+0x54>)
 800068c:	f000 facc 	bl	8000c28 <HAL_GPIO_Init>



  /* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2102      	movs	r1, #2
 8000694:	2028      	movs	r0, #40	; 0x28
 8000696:	f000 fa82 	bl	8000b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800069a:	2028      	movs	r0, #40	; 0x28
 800069c:	f000 fa9b 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
}
 80006a0:	bf00      	nop
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	48000800 	.word	0x48000800

080006b0 <LED_CTRL_vfnChangeIntensity>:
}



void LED_CTRL_vfnChangeIntensity (void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
      led_target = pulsos;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <LED_CTRL_vfnChangeIntensity+0x24>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <LED_CTRL_vfnChangeIntensity+0x28>)
 80006ba:	6013      	str	r3, [r2, #0]
      led_state = LED_OFF;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <LED_CTRL_vfnChangeIntensity+0x2c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
      led_dim = led_target;
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <LED_CTRL_vfnChangeIntensity+0x28>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <LED_CTRL_vfnChangeIntensity+0x30>)
 80006c8:	6013      	str	r3, [r2, #0]
      HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006ca:	201d      	movs	r0, #29
 80006cc:	f000 fa83 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000bc 	.word	0x200000bc
 80006d8:	200000b8 	.word	0x200000b8
 80006dc:	200000b0 	.word	0x200000b0
 80006e0:	200000b4 	.word	0x200000b4

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	e7fe      	b.n	80006ec <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <HAL_MspInit+0x44>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <HAL_MspInit+0x44>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6193      	str	r3, [r2, #24]
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <HAL_MspInit+0x44>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_MspInit+0x44>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	4a08      	ldr	r2, [pc, #32]	; (8000734 <HAL_MspInit+0x44>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000718:	61d3      	str	r3, [r2, #28]
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_MspInit+0x44>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <HAL_UART_MspInit+0x80>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d129      	bne.n	80007ae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <HAL_UART_MspInit+0x84>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <HAL_UART_MspInit+0x84>)
 8000760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_UART_MspInit+0x84>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_UART_MspInit+0x84>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <HAL_UART_MspInit+0x84>)
 8000778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_UART_MspInit+0x84>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800078a:	f248 0304 	movw	r3, #32772	; 0x8004
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800079c:	2307      	movs	r3, #7
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007aa:	f000 fa3d 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40004400 	.word	0x40004400
 80007bc:	40021000 	.word	0x40021000

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler+0x4>

080007c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler+0x4>

080007d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>

080007de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f884 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <SystemInit+0x20>)
 800081a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081e:	4a05      	ldr	r2, [pc, #20]	; (8000834 <SystemInit+0x20>)
 8000820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000870 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <LoopForever+0x6>)
  ldr r1, =_edata
 800083e:	490e      	ldr	r1, [pc, #56]	; (8000878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000840:	4a0e      	ldr	r2, [pc, #56]	; (800087c <LoopForever+0xe>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000854:	4c0b      	ldr	r4, [pc, #44]	; (8000884 <LoopForever+0x16>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000862:	f7ff ffd7 	bl	8000814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000866:	f002 fd73 	bl	8003350 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800086a:	f7ff fcad 	bl	80001c8 <main>

0800086e <LoopForever>:

LoopForever:
    b LoopForever
 800086e:	e7fe      	b.n	800086e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000870:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800087c:	08003400 	.word	0x08003400
  ldr r2, =_sbss
 8000880:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000884:	20000118 	.word	0x20000118

08000888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_2_IRQHandler>
	...

0800088c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_Init+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_Init+0x28>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f973 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 f808 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a8:	f7ff ff22 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x54>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x58>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f999 	bl	8000c0e <HAL_SYSTICK_Config>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00e      	b.n	8000904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	d80a      	bhi.n	8000902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f000 f953 	bl	8000b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f8:	4a06      	ldr	r2, [pc, #24]	; (8000914 <HAL_InitTick+0x5c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000004 	.word	0x20000004
 8000910:	2000000c 	.word	0x2000000c
 8000914:	20000008 	.word	0x20000008

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_IncTick+0x20>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x24>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_IncTick+0x24>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	2000000c 	.word	0x2000000c
 800093c:	20000114 	.word	0x20000114

08000940 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;  
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <HAL_GetTick+0x14>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000114 	.word	0x20000114

08000958 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000960:	f7ff ffee 	bl	8000940 <HAL_GetTick>
 8000964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000970:	d005      	beq.n	800097e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_Delay+0x44>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4413      	add	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800097e:	bf00      	nop
 8000980:	f7ff ffde 	bl	8000940 <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	429a      	cmp	r2, r3
 800098e:	d8f7      	bhi.n	8000980 <HAL_Delay+0x28>
  {
  }
}
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000000c 	.word	0x2000000c

080009a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d2:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	60d3      	str	r3, [r2, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <__NVIC_GetPriorityGrouping+0x18>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	f003 0307 	and.w	r3, r3, #7
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	db0b      	blt.n	8000a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 021f 	and.w	r2, r3, #31
 8000a1c:	4907      	ldr	r1, [pc, #28]	; (8000a3c <__NVIC_EnableIRQ+0x38>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	095b      	lsrs	r3, r3, #5
 8000a24:	2001      	movs	r0, #1
 8000a26:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000e100 	.word	0xe000e100

08000a40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db12      	blt.n	8000a78 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 021f 	and.w	r2, r3, #31
 8000a58:	490a      	ldr	r1, [pc, #40]	; (8000a84 <__NVIC_DisableIRQ+0x44>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	3320      	adds	r3, #32
 8000a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a6c:	f3bf 8f4f 	dsb	sy
}
 8000a70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a72:	f3bf 8f6f 	isb	sy
}
 8000a76:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db0a      	blt.n	8000ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <__NVIC_SetPriority+0x4c>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab0:	e00a      	b.n	8000ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <__NVIC_SetPriority+0x50>)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	761a      	strb	r2, [r3, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f1c3 0307 	rsb	r3, r3, #7
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	bf28      	it	cs
 8000afa:	2304      	movcs	r3, #4
 8000afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d902      	bls.n	8000b0c <NVIC_EncodePriority+0x30>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <NVIC_EncodePriority+0x32>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43d9      	mvns	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	4313      	orrs	r3, r2
         );
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	; 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b54:	d301      	bcc.n	8000b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00f      	b.n	8000b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <SysTick_Config+0x40>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b62:	210f      	movs	r1, #15
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f7ff ff8e 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <SysTick_Config+0x40>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SysTick_Config+0x40>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff05 	bl	80009a0 <__NVIC_SetPriorityGrouping>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff1a 	bl	80009e8 <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ff8e 	bl	8000adc <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff5d 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff0d 	bl	8000a04 <__NVIC_EnableIRQ>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff1d 	bl	8000a40 <__NVIC_DisableIRQ>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ff94 	bl	8000b44 <SysTick_Config>
 8000c1c:	4603      	mov	r3, r0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c36:	e14e      	b.n	8000ed6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	4013      	ands	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 8140 	beq.w	8000ed0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d005      	beq.n	8000c68 <HAL_GPIO_Init+0x40>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d130      	bne.n	8000cca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	f003 0201 	and.w	r2, r3, #1
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d017      	beq.n	8000d06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d123      	bne.n	8000d5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	220f      	movs	r2, #15
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	691a      	ldr	r2, [r3, #16]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	08da      	lsrs	r2, r3, #3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3208      	adds	r2, #8
 8000d54:	6939      	ldr	r1, [r7, #16]
 8000d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0203 	and.w	r2, r3, #3
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 809a 	beq.w	8000ed0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9c:	4b55      	ldr	r3, [pc, #340]	; (8000ef4 <HAL_GPIO_Init+0x2cc>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a54      	ldr	r2, [pc, #336]	; (8000ef4 <HAL_GPIO_Init+0x2cc>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b52      	ldr	r3, [pc, #328]	; (8000ef4 <HAL_GPIO_Init+0x2cc>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000db4:	4a50      	ldr	r2, [pc, #320]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dde:	d013      	beq.n	8000e08 <HAL_GPIO_Init+0x1e0>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a46      	ldr	r2, [pc, #280]	; (8000efc <HAL_GPIO_Init+0x2d4>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d00d      	beq.n	8000e04 <HAL_GPIO_Init+0x1dc>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a45      	ldr	r2, [pc, #276]	; (8000f00 <HAL_GPIO_Init+0x2d8>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d007      	beq.n	8000e00 <HAL_GPIO_Init+0x1d8>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a44      	ldr	r2, [pc, #272]	; (8000f04 <HAL_GPIO_Init+0x2dc>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d101      	bne.n	8000dfc <HAL_GPIO_Init+0x1d4>
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e006      	b.n	8000e0a <HAL_GPIO_Init+0x1e2>
 8000dfc:	2305      	movs	r3, #5
 8000dfe:	e004      	b.n	8000e0a <HAL_GPIO_Init+0x1e2>
 8000e00:	2302      	movs	r3, #2
 8000e02:	e002      	b.n	8000e0a <HAL_GPIO_Init+0x1e2>
 8000e04:	2301      	movs	r3, #1
 8000e06:	e000      	b.n	8000e0a <HAL_GPIO_Init+0x1e2>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	f002 0203 	and.w	r2, r2, #3
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	4093      	lsls	r3, r2
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e1a:	4937      	ldr	r1, [pc, #220]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	3302      	adds	r3, #2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e28:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <HAL_GPIO_Init+0x2e0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e4c:	4a2e      	ldr	r2, [pc, #184]	; (8000f08 <HAL_GPIO_Init+0x2e0>)
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <HAL_GPIO_Init+0x2e0>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e76:	4a24      	ldr	r2, [pc, #144]	; (8000f08 <HAL_GPIO_Init+0x2e0>)
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <HAL_GPIO_Init+0x2e0>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ea0:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <HAL_GPIO_Init+0x2e0>)
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_GPIO_Init+0x2e0>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <HAL_GPIO_Init+0x2e0>)
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f47f aea9 	bne.w	8000c38 <HAL_GPIO_Init+0x10>
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	371c      	adds	r7, #28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010000 	.word	0x40010000
 8000efc:	48000400 	.word	0x48000400
 8000f00:	48000800 	.word	0x48000800
 8000f04:	48000c00 	.word	0x48000c00
 8000f08:	40010400 	.word	0x40010400

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f28:	e002      	b.n	8000f30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f4c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f001 b823 	b.w	8001fa8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 817d 	beq.w	8001272 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f78:	4bbc      	ldr	r3, [pc, #752]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d00c      	beq.n	8000f9e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f84:	4bb9      	ldr	r3, [pc, #740]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d15c      	bne.n	800104a <HAL_RCC_OscConfig+0x10e>
 8000f90:	4bb6      	ldr	r3, [pc, #728]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9c:	d155      	bne.n	800104a <HAL_RCC_OscConfig+0x10e>
 8000f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000faa:	fa93 f3a3 	rbit	r3, r3
 8000fae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fb2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb6:	fab3 f383 	clz	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	095b      	lsrs	r3, r3, #5
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d102      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x94>
 8000fca:	4ba8      	ldr	r3, [pc, #672]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	e015      	b.n	8000ffc <HAL_RCC_OscConfig+0xc0>
 8000fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000fec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ff0:	fa93 f3a3 	rbit	r3, r3
 8000ff4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ff8:	4b9c      	ldr	r3, [pc, #624]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001000:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001004:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001008:	fa92 f2a2 	rbit	r2, r2
 800100c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001010:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001014:	fab2 f282 	clz	r2, r2
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	f042 0220 	orr.w	r2, r2, #32
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	f002 021f 	and.w	r2, r2, #31
 8001024:	2101      	movs	r1, #1
 8001026:	fa01 f202 	lsl.w	r2, r1, r2
 800102a:	4013      	ands	r3, r2
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 811f 	beq.w	8001270 <HAL_RCC_OscConfig+0x334>
 8001032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001036:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	f040 8116 	bne.w	8001270 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	f000 bfaf 	b.w	8001fa8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800104e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800105a:	d106      	bne.n	800106a <HAL_RCC_OscConfig+0x12e>
 800105c:	4b83      	ldr	r3, [pc, #524]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a82      	ldr	r2, [pc, #520]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	e036      	b.n	80010d8 <HAL_RCC_OscConfig+0x19c>
 800106a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800106e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10c      	bne.n	8001094 <HAL_RCC_OscConfig+0x158>
 800107a:	4b7c      	ldr	r3, [pc, #496]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a7b      	ldr	r2, [pc, #492]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	4b79      	ldr	r3, [pc, #484]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a78      	ldr	r2, [pc, #480]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800108c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e021      	b.n	80010d8 <HAL_RCC_OscConfig+0x19c>
 8001094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001098:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x184>
 80010a6:	4b71      	ldr	r3, [pc, #452]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a70      	ldr	r2, [pc, #448]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b6e      	ldr	r3, [pc, #440]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a6d      	ldr	r2, [pc, #436]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e00b      	b.n	80010d8 <HAL_RCC_OscConfig+0x19c>
 80010c0:	4b6a      	ldr	r3, [pc, #424]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a69      	ldr	r2, [pc, #420]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b67      	ldr	r3, [pc, #412]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a66      	ldr	r2, [pc, #408]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010d8:	4b64      	ldr	r3, [pc, #400]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	f023 020f 	bic.w	r2, r3, #15
 80010e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	495f      	ldr	r1, [pc, #380]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d059      	beq.n	80011b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff fc1d 	bl	8000940 <HAL_GetTick>
 8001106:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	e00a      	b.n	8001122 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800110c:	f7ff fc18 	bl	8000940 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b64      	cmp	r3, #100	; 0x64
 800111a:	d902      	bls.n	8001122 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	f000 bf43 	b.w	8001fa8 <HAL_RCC_OscConfig+0x106c>
 8001122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001126:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001136:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	fab3 f383 	clz	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	095b      	lsrs	r3, r3, #5
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d102      	bne.n	8001154 <HAL_RCC_OscConfig+0x218>
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	e015      	b.n	8001180 <HAL_RCC_OscConfig+0x244>
 8001154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001158:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001160:	fa93 f3a3 	rbit	r3, r3
 8001164:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001170:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800117c:	4b3b      	ldr	r3, [pc, #236]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001184:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001188:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800118c:	fa92 f2a2 	rbit	r2, r2
 8001190:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001194:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001198:	fab2 f282 	clz	r2, r2
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	f042 0220 	orr.w	r2, r2, #32
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	f002 021f 	and.w	r2, r2, #31
 80011a8:	2101      	movs	r1, #1
 80011aa:	fa01 f202 	lsl.w	r2, r1, r2
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0ab      	beq.n	800110c <HAL_RCC_OscConfig+0x1d0>
 80011b4:	e05d      	b.n	8001272 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b6:	f7ff fbc3 	bl	8000940 <HAL_GetTick>
 80011ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011be:	e00a      	b.n	80011d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fbbe 	bl	8000940 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b64      	cmp	r3, #100	; 0x64
 80011ce:	d902      	bls.n	80011d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	f000 bee9 	b.w	8001fa8 <HAL_RCC_OscConfig+0x106c>
 80011d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80011ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	fab3 f383 	clz	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	095b      	lsrs	r3, r3, #5
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d102      	bne.n	8001208 <HAL_RCC_OscConfig+0x2cc>
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	e015      	b.n	8001234 <HAL_RCC_OscConfig+0x2f8>
 8001208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001214:	fa93 f3a3 	rbit	r3, r3
 8001218:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800121c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001220:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001224:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001238:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800123c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001240:	fa92 f2a2 	rbit	r2, r2
 8001244:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001248:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800124c:	fab2 f282 	clz	r2, r2
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	f042 0220 	orr.w	r2, r2, #32
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	f002 021f 	and.w	r2, r2, #31
 800125c:	2101      	movs	r1, #1
 800125e:	fa01 f202 	lsl.w	r2, r1, r2
 8001262:	4013      	ands	r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1ab      	bne.n	80011c0 <HAL_RCC_OscConfig+0x284>
 8001268:	e003      	b.n	8001272 <HAL_RCC_OscConfig+0x336>
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 817d 	beq.w	8001582 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001288:	4ba6      	ldr	r3, [pc, #664]	; (8001524 <HAL_RCC_OscConfig+0x5e8>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00b      	beq.n	80012ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001294:	4ba3      	ldr	r3, [pc, #652]	; (8001524 <HAL_RCC_OscConfig+0x5e8>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b08      	cmp	r3, #8
 800129e:	d172      	bne.n	8001386 <HAL_RCC_OscConfig+0x44a>
 80012a0:	4ba0      	ldr	r3, [pc, #640]	; (8001524 <HAL_RCC_OscConfig+0x5e8>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d16c      	bne.n	8001386 <HAL_RCC_OscConfig+0x44a>
 80012ac:	2302      	movs	r3, #2
 80012ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80012be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	095b      	lsrs	r3, r3, #5
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d102      	bne.n	80012dc <HAL_RCC_OscConfig+0x3a0>
 80012d6:	4b93      	ldr	r3, [pc, #588]	; (8001524 <HAL_RCC_OscConfig+0x5e8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	e013      	b.n	8001304 <HAL_RCC_OscConfig+0x3c8>
 80012dc:	2302      	movs	r3, #2
 80012de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012ee:	2302      	movs	r3, #2
 80012f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001300:	4b88      	ldr	r3, [pc, #544]	; (8001524 <HAL_RCC_OscConfig+0x5e8>)
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	2202      	movs	r2, #2
 8001306:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800130a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800130e:	fa92 f2a2 	rbit	r2, r2
 8001312:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001316:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800131a:	fab2 f282 	clz	r2, r2
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	f042 0220 	orr.w	r2, r2, #32
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	f002 021f 	and.w	r2, r2, #31
 800132a:	2101      	movs	r1, #1
 800132c:	fa01 f202 	lsl.w	r2, r1, r2
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00a      	beq.n	800134c <HAL_RCC_OscConfig+0x410>
 8001336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d002      	beq.n	800134c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	f000 be2e 	b.w	8001fa8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b75      	ldr	r3, [pc, #468]	; (8001524 <HAL_RCC_OscConfig+0x5e8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001358:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	21f8      	movs	r1, #248	; 0xf8
 8001362:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800136a:	fa91 f1a1 	rbit	r1, r1
 800136e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001372:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001376:	fab1 f181 	clz	r1, r1
 800137a:	b2c9      	uxtb	r1, r1
 800137c:	408b      	lsls	r3, r1
 800137e:	4969      	ldr	r1, [pc, #420]	; (8001524 <HAL_RCC_OscConfig+0x5e8>)
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001384:	e0fd      	b.n	8001582 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8088 	beq.w	80014a8 <HAL_RCC_OscConfig+0x56c>
 8001398:	2301      	movs	r3, #1
 800139a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80013a2:	fa93 f3a3 	rbit	r3, r3
 80013a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80013aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	461a      	mov	r2, r3
 80013c0:	2301      	movs	r3, #1
 80013c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fabc 	bl	8000940 <HAL_GetTick>
 80013c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	e00a      	b.n	80013e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fab7 	bl	8000940 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d902      	bls.n	80013e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	f000 bde2 	b.w	8001fa8 <HAL_RCC_OscConfig+0x106c>
 80013e4:	2302      	movs	r3, #2
 80013e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013ee:	fa93 f3a3 	rbit	r3, r3
 80013f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80013f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fa:	fab3 f383 	clz	r3, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	095b      	lsrs	r3, r3, #5
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b01      	cmp	r3, #1
 800140c:	d102      	bne.n	8001414 <HAL_RCC_OscConfig+0x4d8>
 800140e:	4b45      	ldr	r3, [pc, #276]	; (8001524 <HAL_RCC_OscConfig+0x5e8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	e013      	b.n	800143c <HAL_RCC_OscConfig+0x500>
 8001414:	2302      	movs	r3, #2
 8001416:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800142c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001430:	fa93 f3a3 	rbit	r3, r3
 8001434:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001438:	4b3a      	ldr	r3, [pc, #232]	; (8001524 <HAL_RCC_OscConfig+0x5e8>)
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	2202      	movs	r2, #2
 800143e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001442:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001446:	fa92 f2a2 	rbit	r2, r2
 800144a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800144e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001452:	fab2 f282 	clz	r2, r2
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	f042 0220 	orr.w	r2, r2, #32
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	f002 021f 	and.w	r2, r2, #31
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f202 	lsl.w	r2, r1, r2
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0af      	beq.n	80013ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <HAL_RCC_OscConfig+0x5e8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	21f8      	movs	r1, #248	; 0xf8
 8001484:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800148c:	fa91 f1a1 	rbit	r1, r1
 8001490:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001494:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001498:	fab1 f181 	clz	r1, r1
 800149c:	b2c9      	uxtb	r1, r1
 800149e:	408b      	lsls	r3, r1
 80014a0:	4920      	ldr	r1, [pc, #128]	; (8001524 <HAL_RCC_OscConfig+0x5e8>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]
 80014a6:	e06c      	b.n	8001582 <HAL_RCC_OscConfig+0x646>
 80014a8:	2301      	movs	r3, #1
 80014aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80014ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	461a      	mov	r2, r3
 80014d0:	2300      	movs	r3, #0
 80014d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fa34 	bl	8000940 <HAL_GetTick>
 80014d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014de:	f7ff fa2f 	bl	8000940 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d902      	bls.n	80014f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	f000 bd5a 	b.w	8001fa8 <HAL_RCC_OscConfig+0x106c>
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014fe:	fa93 f3a3 	rbit	r3, r3
 8001502:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150a:	fab3 f383 	clz	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	095b      	lsrs	r3, r3, #5
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b01      	cmp	r3, #1
 800151c:	d104      	bne.n	8001528 <HAL_RCC_OscConfig+0x5ec>
 800151e:	4b01      	ldr	r3, [pc, #4]	; (8001524 <HAL_RCC_OscConfig+0x5e8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	e015      	b.n	8001550 <HAL_RCC_OscConfig+0x614>
 8001524:	40021000 	.word	0x40021000
 8001528:	2302      	movs	r3, #2
 800152a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800153a:	2302      	movs	r3, #2
 800153c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001540:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001544:	fa93 f3a3 	rbit	r3, r3
 8001548:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800154c:	4bc8      	ldr	r3, [pc, #800]	; (8001870 <HAL_RCC_OscConfig+0x934>)
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	2202      	movs	r2, #2
 8001552:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001556:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800155a:	fa92 f2a2 	rbit	r2, r2
 800155e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001562:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001566:	fab2 f282 	clz	r2, r2
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	f042 0220 	orr.w	r2, r2, #32
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	f002 021f 	and.w	r2, r2, #31
 8001576:	2101      	movs	r1, #1
 8001578:	fa01 f202 	lsl.w	r2, r1, r2
 800157c:	4013      	ands	r3, r2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ad      	bne.n	80014de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 8110 	beq.w	80017b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d079      	beq.n	800169c <HAL_RCC_OscConfig+0x760>
 80015a8:	2301      	movs	r3, #1
 80015aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80015ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015be:	fab3 f383 	clz	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	4bab      	ldr	r3, [pc, #684]	; (8001874 <HAL_RCC_OscConfig+0x938>)
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	461a      	mov	r2, r3
 80015ce:	2301      	movs	r3, #1
 80015d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff f9b5 	bl	8000940 <HAL_GetTick>
 80015d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015dc:	f7ff f9b0 	bl	8000940 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d902      	bls.n	80015f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	f000 bcdb 	b.w	8001fa8 <HAL_RCC_OscConfig+0x106c>
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015fc:	fa93 f3a3 	rbit	r3, r3
 8001600:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001608:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800160c:	2202      	movs	r2, #2
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001614:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	fa93 f2a3 	rbit	r2, r3
 800161e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001630:	2202      	movs	r2, #2
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	fa93 f2a3 	rbit	r2, r3
 8001642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001646:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800164a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164c:	4b88      	ldr	r3, [pc, #544]	; (8001870 <HAL_RCC_OscConfig+0x934>)
 800164e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001654:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001658:	2102      	movs	r1, #2
 800165a:	6019      	str	r1, [r3, #0]
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fa93 f1a3 	rbit	r1, r3
 800166a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001672:	6019      	str	r1, [r3, #0]
  return result;
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	fab3 f383 	clz	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0a0      	beq.n	80015dc <HAL_RCC_OscConfig+0x6a0>
 800169a:	e08d      	b.n	80017b8 <HAL_RCC_OscConfig+0x87c>
 800169c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	fa93 f2a3 	rbit	r2, r3
 80016b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016be:	601a      	str	r2, [r3, #0]
  return result;
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ca:	fab3 f383 	clz	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_RCC_OscConfig+0x938>)
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	461a      	mov	r2, r3
 80016da:	2300      	movs	r3, #0
 80016dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff f92f 	bl	8000940 <HAL_GetTick>
 80016e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e8:	f7ff f92a 	bl	8000940 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d902      	bls.n	80016fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	f000 bc55 	b.w	8001fa8 <HAL_RCC_OscConfig+0x106c>
 80016fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001702:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001706:	2202      	movs	r2, #2
 8001708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	fa93 f2a3 	rbit	r2, r3
 8001718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001726:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800172a:	2202      	movs	r2, #2
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	fa93 f2a3 	rbit	r2, r3
 800173c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001740:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800174e:	2202      	movs	r2, #2
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	fa93 f2a3 	rbit	r2, r3
 8001760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001764:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001768:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176a:	4b41      	ldr	r3, [pc, #260]	; (8001870 <HAL_RCC_OscConfig+0x934>)
 800176c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001776:	2102      	movs	r1, #2
 8001778:	6019      	str	r1, [r3, #0]
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fa93 f1a3 	rbit	r1, r3
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001790:	6019      	str	r1, [r3, #0]
  return result;
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d197      	bne.n	80016e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 81a1 	beq.w	8001b10 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d4:	4b26      	ldr	r3, [pc, #152]	; (8001870 <HAL_RCC_OscConfig+0x934>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d116      	bne.n	800180e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e0:	4b23      	ldr	r3, [pc, #140]	; (8001870 <HAL_RCC_OscConfig+0x934>)
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	4a22      	ldr	r2, [pc, #136]	; (8001870 <HAL_RCC_OscConfig+0x934>)
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ea:	61d3      	str	r3, [r2, #28]
 80017ec:	4b20      	ldr	r3, [pc, #128]	; (8001870 <HAL_RCC_OscConfig+0x934>)
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001802:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001806:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001808:	2301      	movs	r3, #1
 800180a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_RCC_OscConfig+0x93c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d11a      	bne.n	8001850 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_RCC_OscConfig+0x93c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a16      	ldr	r2, [pc, #88]	; (8001878 <HAL_RCC_OscConfig+0x93c>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001826:	f7ff f88b 	bl	8000940 <HAL_GetTick>
 800182a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182e:	e009      	b.n	8001844 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001830:	f7ff f886 	bl	8000940 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b64      	cmp	r3, #100	; 0x64
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e3b1      	b.n	8001fa8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_RCC_OscConfig+0x93c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ef      	beq.n	8001830 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001854:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d10d      	bne.n	800187c <HAL_RCC_OscConfig+0x940>
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_RCC_OscConfig+0x934>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4a02      	ldr	r2, [pc, #8]	; (8001870 <HAL_RCC_OscConfig+0x934>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6213      	str	r3, [r2, #32]
 800186c:	e03c      	b.n	80018e8 <HAL_RCC_OscConfig+0x9ac>
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
 8001874:	10908120 	.word	0x10908120
 8001878:	40007000 	.word	0x40007000
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x96a>
 800188c:	4bc1      	ldr	r3, [pc, #772]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4ac0      	ldr	r2, [pc, #768]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	6213      	str	r3, [r2, #32]
 8001898:	4bbe      	ldr	r3, [pc, #760]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4abd      	ldr	r2, [pc, #756]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 800189e:	f023 0304 	bic.w	r3, r3, #4
 80018a2:	6213      	str	r3, [r2, #32]
 80018a4:	e020      	b.n	80018e8 <HAL_RCC_OscConfig+0x9ac>
 80018a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x994>
 80018b6:	4bb7      	ldr	r3, [pc, #732]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4ab6      	ldr	r2, [pc, #728]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	6213      	str	r3, [r2, #32]
 80018c2:	4bb4      	ldr	r3, [pc, #720]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4ab3      	ldr	r2, [pc, #716]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0x9ac>
 80018d0:	4bb0      	ldr	r3, [pc, #704]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4aaf      	ldr	r2, [pc, #700]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	4bad      	ldr	r3, [pc, #692]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4aac      	ldr	r2, [pc, #688]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 80018e2:	f023 0304 	bic.w	r3, r3, #4
 80018e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 8081 	beq.w	80019fc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7ff f821 	bl	8000940 <HAL_GetTick>
 80018fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff f81c 	bl	8000940 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f241 3288 	movw	r2, #5000	; 0x1388
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e345      	b.n	8001fa8 <HAL_RCC_OscConfig+0x106c>
 800191c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001920:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001924:	2202      	movs	r2, #2
 8001926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	fa93 f2a3 	rbit	r2, r3
 8001936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001944:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001948:	2202      	movs	r2, #2
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001950:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	fa93 f2a3 	rbit	r2, r3
 800195a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001962:	601a      	str	r2, [r3, #0]
  return result;
 8001964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001968:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800196c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	095b      	lsrs	r3, r3, #5
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d102      	bne.n	8001988 <HAL_RCC_OscConfig+0xa4c>
 8001982:	4b84      	ldr	r3, [pc, #528]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	e013      	b.n	80019b0 <HAL_RCC_OscConfig+0xa74>
 8001988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001990:	2202      	movs	r2, #2
 8001992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001998:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fa93 f2a3 	rbit	r2, r3
 80019a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	4b79      	ldr	r3, [pc, #484]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80019b8:	2102      	movs	r1, #2
 80019ba:	6011      	str	r1, [r2, #0]
 80019bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	fa92 f1a2 	rbit	r1, r2
 80019ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019d2:	6011      	str	r1, [r2, #0]
  return result;
 80019d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019d8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	fab2 f282 	clz	r2, r2
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	f002 021f 	and.w	r2, r2, #31
 80019ee:	2101      	movs	r1, #1
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d084      	beq.n	8001904 <HAL_RCC_OscConfig+0x9c8>
 80019fa:	e07f      	b.n	8001afc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fc:	f7fe ffa0 	bl	8000940 <HAL_GetTick>
 8001a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	e00b      	b.n	8001a1e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7fe ff9b 	bl	8000940 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2c4      	b.n	8001fa8 <HAL_RCC_OscConfig+0x106c>
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a26:	2202      	movs	r2, #2
 8001a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	fa93 f2a3 	rbit	r2, r3
 8001a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a52:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	fa93 f2a3 	rbit	r2, r3
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a64:	601a      	str	r2, [r3, #0]
  return result;
 8001a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d102      	bne.n	8001a8a <HAL_RCC_OscConfig+0xb4e>
 8001a84:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	e013      	b.n	8001ab2 <HAL_RCC_OscConfig+0xb76>
 8001a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a92:	2202      	movs	r2, #2
 8001a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	fa93 f2a3 	rbit	r2, r3
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ab6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001aba:	2102      	movs	r1, #2
 8001abc:	6011      	str	r1, [r2, #0]
 8001abe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ac2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	fa92 f1a2 	rbit	r1, r2
 8001acc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ad0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ad4:	6011      	str	r1, [r2, #0]
  return result;
 8001ad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ada:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	fab2 f282 	clz	r2, r2
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	f002 021f 	and.w	r2, r2, #31
 8001af0:	2101      	movs	r1, #1
 8001af2:	fa01 f202 	lsl.w	r2, r1, r2
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d184      	bne.n	8001a06 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001afc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 8001b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8242 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b22:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <HAL_RCC_OscConfig+0xc58>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	f000 8213 	beq.w	8001f56 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	f040 8162 	bne.w	8001e06 <HAL_RCC_OscConfig+0xeca>
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b66:	601a      	str	r2, [r3, #0]
  return result;
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	461a      	mov	r2, r3
 8001b84:	2300      	movs	r3, #0
 8001b86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7fe feda 	bl	8000940 <HAL_GetTick>
 8001b8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b90:	e00c      	b.n	8001bac <HAL_RCC_OscConfig+0xc70>
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b98:	f7fe fed2 	bl	8000940 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e1fd      	b.n	8001fa8 <HAL_RCC_OscConfig+0x106c>
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001bd0:	601a      	str	r2, [r3, #0]
  return result;
 8001bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001bda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d102      	bne.n	8001bf6 <HAL_RCC_OscConfig+0xcba>
 8001bf0:	4bb0      	ldr	r3, [pc, #704]	; (8001eb4 <HAL_RCC_OscConfig+0xf78>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	e027      	b.n	8001c46 <HAL_RCC_OscConfig+0xd0a>
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001bfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c20:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	fa93 f2a3 	rbit	r2, r3
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	4b9c      	ldr	r3, [pc, #624]	; (8001eb4 <HAL_RCC_OscConfig+0xf78>)
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c4a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c52:	6011      	str	r1, [r2, #0]
 8001c54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c58:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	fa92 f1a2 	rbit	r1, r2
 8001c62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c6a:	6011      	str	r1, [r2, #0]
  return result;
 8001c6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c70:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	fab2 f282 	clz	r2, r2
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	f042 0220 	orr.w	r2, r2, #32
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f002 021f 	and.w	r2, r2, #31
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d182      	bne.n	8001b98 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c92:	4b88      	ldr	r3, [pc, #544]	; (8001eb4 <HAL_RCC_OscConfig+0xf78>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	430b      	orrs	r3, r1
 8001cb4:	497f      	ldr	r1, [pc, #508]	; (8001eb4 <HAL_RCC_OscConfig+0xf78>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001cc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cde:	601a      	str	r2, [r3, #0]
  return result;
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ce8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7fe fe1e 	bl	8000940 <HAL_GetTick>
 8001d04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d08:	e009      	b.n	8001d1e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7fe fe19 	bl	8000940 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e144      	b.n	8001fa8 <HAL_RCC_OscConfig+0x106c>
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fa93 f2a3 	rbit	r2, r3
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d42:	601a      	str	r2, [r3, #0]
  return result;
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	095b      	lsrs	r3, r3, #5
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d102      	bne.n	8001d68 <HAL_RCC_OscConfig+0xe2c>
 8001d62:	4b54      	ldr	r3, [pc, #336]	; (8001eb4 <HAL_RCC_OscConfig+0xf78>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	e027      	b.n	8001db8 <HAL_RCC_OscConfig+0xe7c>
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	fa93 f2a3 	rbit	r2, r3
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <HAL_RCC_OscConfig+0xf78>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dbc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001dc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dc4:	6011      	str	r1, [r2, #0]
 8001dc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	fa92 f1a2 	rbit	r1, r2
 8001dd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ddc:	6011      	str	r1, [r2, #0]
  return result;
 8001dde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001de2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	fab2 f282 	clz	r2, r2
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f042 0220 	orr.w	r2, r2, #32
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	f002 021f 	and.w	r2, r2, #31
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d082      	beq.n	8001d0a <HAL_RCC_OscConfig+0xdce>
 8001e04:	e0cf      	b.n	8001fa6 <HAL_RCC_OscConfig+0x106a>
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e2a:	601a      	str	r2, [r3, #0]
  return result;
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e34:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	461a      	mov	r2, r3
 8001e48:	2300      	movs	r3, #0
 8001e4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fd78 	bl	8000940 <HAL_GetTick>
 8001e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e54:	e009      	b.n	8001e6a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e56:	f7fe fd73 	bl	8000940 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e09e      	b.n	8001fa8 <HAL_RCC_OscConfig+0x106c>
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f2a3 	rbit	r2, r3
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e8e:	601a      	str	r2, [r3, #0]
  return result;
 8001e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d104      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xf7c>
 8001eae:	4b01      	ldr	r3, [pc, #4]	; (8001eb4 <HAL_RCC_OscConfig+0xf78>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e029      	b.n	8001f08 <HAL_RCC_OscConfig+0xfcc>
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ec0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ee6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	fa93 f2a3 	rbit	r2, r3
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_RCC_OscConfig+0x1078>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f0c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f14:	6011      	str	r1, [r2, #0]
 8001f16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f1a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	fa92 f1a2 	rbit	r1, r2
 8001f24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f28:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f2c:	6011      	str	r1, [r2, #0]
  return result;
 8001f2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f32:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d180      	bne.n	8001e56 <HAL_RCC_OscConfig+0xf1a>
 8001f54:	e027      	b.n	8001fa6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e01e      	b.n	8001fa8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_RCC_OscConfig+0x1078>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f72:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f76:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d10b      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b09e      	sub	sp, #120	; 0x78
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e162      	b.n	8002296 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b90      	ldr	r3, [pc, #576]	; (8002214 <HAL_RCC_ClockConfig+0x25c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d910      	bls.n	8002000 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b8d      	ldr	r3, [pc, #564]	; (8002214 <HAL_RCC_ClockConfig+0x25c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 0207 	bic.w	r2, r3, #7
 8001fe6:	498b      	ldr	r1, [pc, #556]	; (8002214 <HAL_RCC_ClockConfig+0x25c>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b89      	ldr	r3, [pc, #548]	; (8002214 <HAL_RCC_ClockConfig+0x25c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e14a      	b.n	8002296 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200c:	4b82      	ldr	r3, [pc, #520]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	497f      	ldr	r1, [pc, #508]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 80dc 	beq.w	80021e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d13c      	bne.n	80020ae <HAL_RCC_ClockConfig+0xf6>
 8002034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002038:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d102      	bne.n	800205e <HAL_RCC_ClockConfig+0xa6>
 8002058:	4b6f      	ldr	r3, [pc, #444]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	e00f      	b.n	800207e <HAL_RCC_ClockConfig+0xc6>
 800205e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002062:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	667b      	str	r3, [r7, #100]	; 0x64
 800206c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002070:	663b      	str	r3, [r7, #96]	; 0x60
 8002072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800207a:	4b67      	ldr	r3, [pc, #412]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002082:	65ba      	str	r2, [r7, #88]	; 0x58
 8002084:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002086:	fa92 f2a2 	rbit	r2, r2
 800208a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800208c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800208e:	fab2 f282 	clz	r2, r2
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	f042 0220 	orr.w	r2, r2, #32
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	f002 021f 	and.w	r2, r2, #31
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d17b      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0f3      	b.n	8002296 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d13c      	bne.n	8002130 <HAL_RCC_ClockConfig+0x178>
 80020b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d102      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x128>
 80020da:	4b4f      	ldr	r3, [pc, #316]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	e00f      	b.n	8002100 <HAL_RCC_ClockConfig+0x148>
 80020e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	647b      	str	r3, [r7, #68]	; 0x44
 80020ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f2:	643b      	str	r3, [r7, #64]	; 0x40
 80020f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fc:	4b46      	ldr	r3, [pc, #280]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002104:	63ba      	str	r2, [r7, #56]	; 0x38
 8002106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002108:	fa92 f2a2 	rbit	r2, r2
 800210c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800210e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002110:	fab2 f282 	clz	r2, r2
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	f042 0220 	orr.w	r2, r2, #32
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	f002 021f 	and.w	r2, r2, #31
 8002120:	2101      	movs	r1, #1
 8002122:	fa01 f202 	lsl.w	r2, r1, r2
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d13a      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b2      	b.n	8002296 <HAL_RCC_ClockConfig+0x2de>
 8002130:	2302      	movs	r3, #2
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d102      	bne.n	8002158 <HAL_RCC_ClockConfig+0x1a0>
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	e00d      	b.n	8002174 <HAL_RCC_ClockConfig+0x1bc>
 8002158:	2302      	movs	r3, #2
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
 8002164:	2302      	movs	r3, #2
 8002166:	623b      	str	r3, [r7, #32]
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	2202      	movs	r2, #2
 8002176:	61ba      	str	r2, [r7, #24]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	fa92 f2a2 	rbit	r2, r2
 800217e:	617a      	str	r2, [r7, #20]
  return result;
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	fab2 f282 	clz	r2, r2
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	f042 0220 	orr.w	r2, r2, #32
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	f002 021f 	and.w	r2, r2, #31
 8002192:	2101      	movs	r1, #1
 8002194:	fa01 f202 	lsl.w	r2, r1, r2
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e079      	b.n	8002296 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f023 0203 	bic.w	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	491a      	ldr	r1, [pc, #104]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b4:	f7fe fbc4 	bl	8000940 <HAL_GetTick>
 80021b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021bc:	f7fe fbc0 	bl	8000940 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e061      	b.n	8002296 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 020c 	and.w	r2, r3, #12
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d1eb      	bne.n	80021bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_ClockConfig+0x25c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d214      	bcs.n	800221c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_RCC_ClockConfig+0x25c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 0207 	bic.w	r2, r3, #7
 80021fa:	4906      	ldr	r1, [pc, #24]	; (8002214 <HAL_RCC_ClockConfig+0x25c>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <HAL_RCC_ClockConfig+0x25c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e040      	b.n	8002296 <HAL_RCC_ClockConfig+0x2de>
 8002214:	40022000 	.word	0x40022000
 8002218:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_RCC_ClockConfig+0x2e8>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	491a      	ldr	r1, [pc, #104]	; (80022a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d009      	beq.n	800225a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4912      	ldr	r1, [pc, #72]	; (80022a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800225a:	f000 f829 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 800225e:	4601      	mov	r1, r0
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002268:	22f0      	movs	r2, #240	; 0xf0
 800226a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	fa92 f2a2 	rbit	r2, r2
 8002272:	60fa      	str	r2, [r7, #12]
  return result;
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	fab2 f282 	clz	r2, r2
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	40d3      	lsrs	r3, r2
 800227e:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <HAL_RCC_ClockConfig+0x2ec>)
 8002280:	5cd3      	ldrb	r3, [r2, r3]
 8002282:	fa21 f303 	lsr.w	r3, r1, r3
 8002286:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <HAL_RCC_ClockConfig+0x2f0>)
 8002288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_RCC_ClockConfig+0x2f4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fb12 	bl	80008b8 <HAL_InitTick>
  
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3778      	adds	r7, #120	; 0x78
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	080033c0 	.word	0x080033c0
 80022a8:	20000004 	.word	0x20000004
 80022ac:	20000008 	.word	0x20000008

080022b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b08b      	sub	sp, #44	; 0x2c
 80022b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022ca:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x30>
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x36>
 80022de:	e03c      	b.n	800235a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022e2:	623b      	str	r3, [r7, #32]
      break;
 80022e4:	e03c      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	fa92 f2a2 	rbit	r2, r2
 80022f8:	607a      	str	r2, [r7, #4]
  return result;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	fab2 f282 	clz	r2, r2
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	40d3      	lsrs	r3, r2
 8002304:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800230a:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_RCC_GetSysClockFreq+0xc0>)
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	220f      	movs	r2, #15
 8002314:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	fa92 f2a2 	rbit	r2, r2
 800231c:	60fa      	str	r2, [r7, #12]
  return result;
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	fab2 f282 	clz	r2, r2
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	40d3      	lsrs	r3, r2
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <HAL_RCC_GetSysClockFreq+0xcc>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002338:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <HAL_RCC_GetSysClockFreq+0xc4>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
 8002348:	e004      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <HAL_RCC_GetSysClockFreq+0xd0>)
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	623b      	str	r3, [r7, #32]
      break;
 8002358:	e002      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_RCC_GetSysClockFreq+0xc4>)
 800235c:	623b      	str	r3, [r7, #32]
      break;
 800235e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002360:	6a3b      	ldr	r3, [r7, #32]
}
 8002362:	4618      	mov	r0, r3
 8002364:	372c      	adds	r7, #44	; 0x2c
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	007a1200 	.word	0x007a1200
 8002378:	080033d8 	.word	0x080033d8
 800237c:	080033e8 	.word	0x080033e8
 8002380:	003d0900 	.word	0x003d0900

08002384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_RCC_GetHCLKFreq+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000004 	.word	0x20000004

0800239c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023a2:	f7ff ffef 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023a6:	4601      	mov	r1, r0
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	fa92 f2a2 	rbit	r2, r2
 80023bc:	603a      	str	r2, [r7, #0]
  return result;
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	fab2 f282 	clz	r2, r2
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	40d3      	lsrs	r3, r2
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	080033d0 	.word	0x080033d0

080023e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023e6:	f7ff ffcd 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023ea:	4601      	mov	r1, r0
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	fa92 f2a2 	rbit	r2, r2
 8002400:	603a      	str	r2, [r7, #0]
  return result;
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	fab2 f282 	clz	r2, r2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	40d3      	lsrs	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_RCC_GetPCLK2Freq+0x40>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	080033d0 	.word	0x080033d0

08002424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e049      	b.n	80024ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fd fff8 	bl	8000440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f000 faa2 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d001      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e040      	b.n	800256e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_TIM_Base_Start_IT+0xa8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00e      	beq.n	800252c <HAL_TIM_Base_Start_IT+0x58>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d009      	beq.n	800252c <HAL_TIM_Base_Start_IT+0x58>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a18      	ldr	r2, [pc, #96]	; (8002580 <HAL_TIM_Base_Start_IT+0xac>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d004      	beq.n	800252c <HAL_TIM_Base_Start_IT+0x58>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_TIM_Base_Start_IT+0xb0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d115      	bne.n	8002558 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_TIM_Base_Start_IT+0xb4>)
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b06      	cmp	r3, #6
 800253c:	d015      	beq.n	800256a <HAL_TIM_Base_Start_IT+0x96>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d011      	beq.n	800256a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002556:	e008      	b.n	800256a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e000      	b.n	800256c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40012c00 	.word	0x40012c00
 8002580:	40000400 	.word	0x40000400
 8002584:	40014000 	.word	0x40014000
 8002588:	00010007 	.word	0x00010007

0800258c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d122      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0202 	mvn.w	r2, #2
 80025b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f9ce 	bl	8002970 <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f9c0 	bl	800295c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f9d1 	bl	8002984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d122      	bne.n	800263c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b04      	cmp	r3, #4
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0204 	mvn.w	r2, #4
 800260c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f9a4 	bl	8002970 <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f996 	bl	800295c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f9a7 	bl	8002984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b08      	cmp	r3, #8
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b08      	cmp	r3, #8
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0208 	mvn.w	r2, #8
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2204      	movs	r2, #4
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f97a 	bl	8002970 <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f96c 	bl	800295c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f97d 	bl	8002984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b10      	cmp	r3, #16
 800269c:	d122      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d11b      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0210 	mvn.w	r2, #16
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2208      	movs	r2, #8
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f950 	bl	8002970 <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f942 	bl	800295c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f953 	bl	8002984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d10e      	bne.n	8002710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0201 	mvn.w	r2, #1
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fd ff1a 	bl	8000544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b80      	cmp	r3, #128	; 0x80
 800271c:	d10e      	bne.n	800273c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d107      	bne.n	800273c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fac2 	bl	8002cc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800274a:	d10e      	bne.n	800276a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b80      	cmp	r3, #128	; 0x80
 8002758:	d107      	bne.n	800276a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fab5 	bl	8002cd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d10e      	bne.n	8002796 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d107      	bne.n	8002796 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800278e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f901 	bl	8002998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d10e      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d107      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f06f 0220 	mvn.w	r2, #32
 80027ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fa75 	bl	8002cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_ConfigClockSource+0x1c>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e0b6      	b.n	8002954 <HAL_TIM_ConfigClockSource+0x18a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2202      	movs	r2, #2
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002804:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002808:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002810:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002822:	d03e      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0xd8>
 8002824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002828:	f200 8087 	bhi.w	800293a <HAL_TIM_ConfigClockSource+0x170>
 800282c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002830:	f000 8086 	beq.w	8002940 <HAL_TIM_ConfigClockSource+0x176>
 8002834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002838:	d87f      	bhi.n	800293a <HAL_TIM_ConfigClockSource+0x170>
 800283a:	2b70      	cmp	r3, #112	; 0x70
 800283c:	d01a      	beq.n	8002874 <HAL_TIM_ConfigClockSource+0xaa>
 800283e:	2b70      	cmp	r3, #112	; 0x70
 8002840:	d87b      	bhi.n	800293a <HAL_TIM_ConfigClockSource+0x170>
 8002842:	2b60      	cmp	r3, #96	; 0x60
 8002844:	d050      	beq.n	80028e8 <HAL_TIM_ConfigClockSource+0x11e>
 8002846:	2b60      	cmp	r3, #96	; 0x60
 8002848:	d877      	bhi.n	800293a <HAL_TIM_ConfigClockSource+0x170>
 800284a:	2b50      	cmp	r3, #80	; 0x50
 800284c:	d03c      	beq.n	80028c8 <HAL_TIM_ConfigClockSource+0xfe>
 800284e:	2b50      	cmp	r3, #80	; 0x50
 8002850:	d873      	bhi.n	800293a <HAL_TIM_ConfigClockSource+0x170>
 8002852:	2b40      	cmp	r3, #64	; 0x40
 8002854:	d058      	beq.n	8002908 <HAL_TIM_ConfigClockSource+0x13e>
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d86f      	bhi.n	800293a <HAL_TIM_ConfigClockSource+0x170>
 800285a:	2b30      	cmp	r3, #48	; 0x30
 800285c:	d064      	beq.n	8002928 <HAL_TIM_ConfigClockSource+0x15e>
 800285e:	2b30      	cmp	r3, #48	; 0x30
 8002860:	d86b      	bhi.n	800293a <HAL_TIM_ConfigClockSource+0x170>
 8002862:	2b20      	cmp	r3, #32
 8002864:	d060      	beq.n	8002928 <HAL_TIM_ConfigClockSource+0x15e>
 8002866:	2b20      	cmp	r3, #32
 8002868:	d867      	bhi.n	800293a <HAL_TIM_ConfigClockSource+0x170>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d05c      	beq.n	8002928 <HAL_TIM_ConfigClockSource+0x15e>
 800286e:	2b10      	cmp	r3, #16
 8002870:	d05a      	beq.n	8002928 <HAL_TIM_ConfigClockSource+0x15e>
 8002872:	e062      	b.n	800293a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6899      	ldr	r1, [r3, #8]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f000 f984 	bl	8002b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002896:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	609a      	str	r2, [r3, #8]
      break;
 80028a0:	e04f      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6899      	ldr	r1, [r3, #8]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f000 f96d 	bl	8002b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c4:	609a      	str	r2, [r3, #8]
      break;
 80028c6:	e03c      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	461a      	mov	r2, r3
 80028d6:	f000 f8e1 	bl	8002a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2150      	movs	r1, #80	; 0x50
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f93a 	bl	8002b5a <TIM_ITRx_SetConfig>
      break;
 80028e6:	e02c      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f000 f900 	bl	8002afa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2160      	movs	r1, #96	; 0x60
 8002900:	4618      	mov	r0, r3
 8002902:	f000 f92a 	bl	8002b5a <TIM_ITRx_SetConfig>
      break;
 8002906:	e01c      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	461a      	mov	r2, r3
 8002916:	f000 f8c1 	bl	8002a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2140      	movs	r1, #64	; 0x40
 8002920:	4618      	mov	r0, r3
 8002922:	f000 f91a 	bl	8002b5a <TIM_ITRx_SetConfig>
      break;
 8002926:	e00c      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f000 f911 	bl	8002b5a <TIM_ITRx_SetConfig>
      break;
 8002938:	e003      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
      break;
 800293e:	e000      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002940:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a32      	ldr	r2, [pc, #200]	; (8002a88 <TIM_Base_SetConfig+0xdc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d007      	beq.n	80029d4 <TIM_Base_SetConfig+0x28>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ca:	d003      	beq.n	80029d4 <TIM_Base_SetConfig+0x28>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a2f      	ldr	r2, [pc, #188]	; (8002a8c <TIM_Base_SetConfig+0xe0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d108      	bne.n	80029e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a27      	ldr	r2, [pc, #156]	; (8002a88 <TIM_Base_SetConfig+0xdc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <TIM_Base_SetConfig+0x6a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f4:	d00f      	beq.n	8002a16 <TIM_Base_SetConfig+0x6a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a24      	ldr	r2, [pc, #144]	; (8002a8c <TIM_Base_SetConfig+0xe0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00b      	beq.n	8002a16 <TIM_Base_SetConfig+0x6a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a23      	ldr	r2, [pc, #140]	; (8002a90 <TIM_Base_SetConfig+0xe4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <TIM_Base_SetConfig+0x6a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <TIM_Base_SetConfig+0xe8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d003      	beq.n	8002a16 <TIM_Base_SetConfig+0x6a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a21      	ldr	r2, [pc, #132]	; (8002a98 <TIM_Base_SetConfig+0xec>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d108      	bne.n	8002a28 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a0e      	ldr	r2, [pc, #56]	; (8002a88 <TIM_Base_SetConfig+0xdc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00b      	beq.n	8002a6c <TIM_Base_SetConfig+0xc0>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <TIM_Base_SetConfig+0xe4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <TIM_Base_SetConfig+0xc0>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a0d      	ldr	r2, [pc, #52]	; (8002a94 <TIM_Base_SetConfig+0xe8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d003      	beq.n	8002a6c <TIM_Base_SetConfig+0xc0>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <TIM_Base_SetConfig+0xec>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d103      	bne.n	8002a74 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	615a      	str	r2, [r3, #20]
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40014000 	.word	0x40014000
 8002a94:	40014400 	.word	0x40014400
 8002a98:	40014800 	.word	0x40014800

08002a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f023 0201 	bic.w	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f023 030a 	bic.w	r3, r3, #10
 8002ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	621a      	str	r2, [r3, #32]
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b087      	sub	sp, #28
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	f023 0210 	bic.w	r2, r3, #16
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	031b      	lsls	r3, r3, #12
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	621a      	str	r2, [r3, #32]
}
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b085      	sub	sp, #20
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f043 0307 	orr.w	r3, r3, #7
 8002b7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002baa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	021a      	lsls	r2, r3, #8
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	609a      	str	r2, [r3, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e054      	b.n	8002c92 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a24      	ldr	r2, [pc, #144]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d108      	bne.n	8002c24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00e      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d009      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d004      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a11      	ldr	r2, [pc, #68]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d10c      	bne.n	8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40014000 	.word	0x40014000

08002cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e040      	b.n	8002d7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fd fd14 	bl	8000738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2224      	movs	r2, #36	; 0x24
 8002d14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f82c 	bl	8002d84 <UART_SetConfig>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e022      	b.n	8002d7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f956 	bl	8002ff0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f9dd 	bl	8003134 <UART_CheckIdleState>
 8002d7a:	4603      	mov	r3, r0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b8a      	ldr	r3, [pc, #552]	; (8002fd8 <UART_SetConfig+0x254>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	6979      	ldr	r1, [r7, #20]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a78      	ldr	r2, [pc, #480]	; (8002fdc <UART_SetConfig+0x258>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d120      	bne.n	8002e42 <UART_SetConfig+0xbe>
 8002e00:	4b77      	ldr	r3, [pc, #476]	; (8002fe0 <UART_SetConfig+0x25c>)
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d817      	bhi.n	8002e3c <UART_SetConfig+0xb8>
 8002e0c:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <UART_SetConfig+0x90>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e31 	.word	0x08002e31
 8002e1c:	08002e37 	.word	0x08002e37
 8002e20:	08002e2b 	.word	0x08002e2b
 8002e24:	2300      	movs	r3, #0
 8002e26:	77fb      	strb	r3, [r7, #31]
 8002e28:	e01d      	b.n	8002e66 <UART_SetConfig+0xe2>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	77fb      	strb	r3, [r7, #31]
 8002e2e:	e01a      	b.n	8002e66 <UART_SetConfig+0xe2>
 8002e30:	2304      	movs	r3, #4
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e017      	b.n	8002e66 <UART_SetConfig+0xe2>
 8002e36:	2308      	movs	r3, #8
 8002e38:	77fb      	strb	r3, [r7, #31]
 8002e3a:	e014      	b.n	8002e66 <UART_SetConfig+0xe2>
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e011      	b.n	8002e66 <UART_SetConfig+0xe2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a67      	ldr	r2, [pc, #412]	; (8002fe4 <UART_SetConfig+0x260>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d102      	bne.n	8002e52 <UART_SetConfig+0xce>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	77fb      	strb	r3, [r7, #31]
 8002e50:	e009      	b.n	8002e66 <UART_SetConfig+0xe2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a64      	ldr	r2, [pc, #400]	; (8002fe8 <UART_SetConfig+0x264>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d102      	bne.n	8002e62 <UART_SetConfig+0xde>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	77fb      	strb	r3, [r7, #31]
 8002e60:	e001      	b.n	8002e66 <UART_SetConfig+0xe2>
 8002e62:	2310      	movs	r3, #16
 8002e64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e6e:	d15b      	bne.n	8002f28 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002e70:	7ffb      	ldrb	r3, [r7, #31]
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d827      	bhi.n	8002ec6 <UART_SetConfig+0x142>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <UART_SetConfig+0xf8>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002ea1 	.word	0x08002ea1
 8002e80:	08002ea9 	.word	0x08002ea9
 8002e84:	08002eb1 	.word	0x08002eb1
 8002e88:	08002ec7 	.word	0x08002ec7
 8002e8c:	08002eb7 	.word	0x08002eb7
 8002e90:	08002ec7 	.word	0x08002ec7
 8002e94:	08002ec7 	.word	0x08002ec7
 8002e98:	08002ec7 	.word	0x08002ec7
 8002e9c:	08002ebf 	.word	0x08002ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7ff fa7c 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8002ea4:	61b8      	str	r0, [r7, #24]
        break;
 8002ea6:	e013      	b.n	8002ed0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ea8:	f7ff fa9a 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 8002eac:	61b8      	str	r0, [r7, #24]
        break;
 8002eae:	e00f      	b.n	8002ed0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb0:	4b4e      	ldr	r3, [pc, #312]	; (8002fec <UART_SetConfig+0x268>)
 8002eb2:	61bb      	str	r3, [r7, #24]
        break;
 8002eb4:	e00c      	b.n	8002ed0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eb6:	f7ff f9fb 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8002eba:	61b8      	str	r0, [r7, #24]
        break;
 8002ebc:	e008      	b.n	8002ed0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec2:	61bb      	str	r3, [r7, #24]
        break;
 8002ec4:	e004      	b.n	8002ed0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	77bb      	strb	r3, [r7, #30]
        break;
 8002ece:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d074      	beq.n	8002fc0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	005a      	lsls	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	441a      	add	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d916      	bls.n	8002f22 <UART_SetConfig+0x19e>
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efa:	d212      	bcs.n	8002f22 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	f023 030f 	bic.w	r3, r3, #15
 8002f04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	89fb      	ldrh	r3, [r7, #14]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	89fa      	ldrh	r2, [r7, #14]
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	e04e      	b.n	8002fc0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	77bb      	strb	r3, [r7, #30]
 8002f26:	e04b      	b.n	8002fc0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f28:	7ffb      	ldrb	r3, [r7, #31]
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d827      	bhi.n	8002f7e <UART_SetConfig+0x1fa>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <UART_SetConfig+0x1b0>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f59 	.word	0x08002f59
 8002f38:	08002f61 	.word	0x08002f61
 8002f3c:	08002f69 	.word	0x08002f69
 8002f40:	08002f7f 	.word	0x08002f7f
 8002f44:	08002f6f 	.word	0x08002f6f
 8002f48:	08002f7f 	.word	0x08002f7f
 8002f4c:	08002f7f 	.word	0x08002f7f
 8002f50:	08002f7f 	.word	0x08002f7f
 8002f54:	08002f77 	.word	0x08002f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f58:	f7ff fa20 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8002f5c:	61b8      	str	r0, [r7, #24]
        break;
 8002f5e:	e013      	b.n	8002f88 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f60:	f7ff fa3e 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 8002f64:	61b8      	str	r0, [r7, #24]
        break;
 8002f66:	e00f      	b.n	8002f88 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f68:	4b20      	ldr	r3, [pc, #128]	; (8002fec <UART_SetConfig+0x268>)
 8002f6a:	61bb      	str	r3, [r7, #24]
        break;
 8002f6c:	e00c      	b.n	8002f88 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f6e:	f7ff f99f 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8002f72:	61b8      	str	r0, [r7, #24]
        break;
 8002f74:	e008      	b.n	8002f88 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f7a:	61bb      	str	r3, [r7, #24]
        break;
 8002f7c:	e004      	b.n	8002f88 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	77bb      	strb	r3, [r7, #30]
        break;
 8002f86:	bf00      	nop
    }

    if (pclk != 0U)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d018      	beq.n	8002fc0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	085a      	lsrs	r2, r3, #1
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	441a      	add	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b0f      	cmp	r3, #15
 8002fa8:	d908      	bls.n	8002fbc <UART_SetConfig+0x238>
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb0:	d204      	bcs.n	8002fbc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	e001      	b.n	8002fc0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002fcc:	7fbb      	ldrb	r3, [r7, #30]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	efff69f3 	.word	0xefff69f3
 8002fdc:	40013800 	.word	0x40013800
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40004400 	.word	0x40004400
 8002fe8:	40004800 	.word	0x40004800
 8002fec:	007a1200 	.word	0x007a1200

08002ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01a      	beq.n	8003106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ee:	d10a      	bne.n	8003106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	605a      	str	r2, [r3, #4]
  }
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af02      	add	r7, sp, #8
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003144:	f7fd fbfc 	bl	8000940 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b08      	cmp	r3, #8
 8003156:	d10e      	bne.n	8003176 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f82d 	bl	80031c6 <UART_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e023      	b.n	80031be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b04      	cmp	r3, #4
 8003182:	d10e      	bne.n	80031a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f817 	bl	80031c6 <UART_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e00d      	b.n	80031be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b09c      	sub	sp, #112	; 0x70
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	4613      	mov	r3, r2
 80031d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d6:	e0a5      	b.n	8003324 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	f000 80a1 	beq.w	8003324 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e2:	f7fd fbad 	bl	8000940 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80031f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d13e      	bne.n	8003276 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003208:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800320c:	667b      	str	r3, [r7, #100]	; 0x64
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003216:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003218:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800321c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800321e:	e841 2300 	strex	r3, r2, [r1]
 8003222:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1e6      	bne.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3308      	adds	r3, #8
 8003230:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800323a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	663b      	str	r3, [r7, #96]	; 0x60
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3308      	adds	r3, #8
 8003248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800324a:	64ba      	str	r2, [r7, #72]	; 0x48
 800324c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e5      	bne.n	800322a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e067      	b.n	8003346 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d04f      	beq.n	8003324 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003292:	d147      	bne.n	8003324 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800329c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	e853 3f00 	ldrex	r3, [r3]
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
 80032be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c4:	e841 2300 	strex	r3, r2, [r1]
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e6      	bne.n	800329e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3308      	adds	r3, #8
 80032d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	e853 3f00 	ldrex	r3, [r3]
 80032de:	613b      	str	r3, [r7, #16]
   return(result);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3308      	adds	r3, #8
 80032ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032f0:	623a      	str	r2, [r7, #32]
 80032f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f4:	69f9      	ldr	r1, [r7, #28]
 80032f6:	6a3a      	ldr	r2, [r7, #32]
 80032f8:	e841 2300 	strex	r3, r2, [r1]
 80032fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e5      	bne.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e010      	b.n	8003346 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4013      	ands	r3, r2
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	429a      	cmp	r2, r3
 8003332:	bf0c      	ite	eq
 8003334:	2301      	moveq	r3, #1
 8003336:	2300      	movne	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	429a      	cmp	r2, r3
 8003340:	f43f af4a 	beq.w	80031d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3770      	adds	r7, #112	; 0x70
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <__libc_init_array>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	4d0d      	ldr	r5, [pc, #52]	; (8003388 <__libc_init_array+0x38>)
 8003354:	4c0d      	ldr	r4, [pc, #52]	; (800338c <__libc_init_array+0x3c>)
 8003356:	1b64      	subs	r4, r4, r5
 8003358:	10a4      	asrs	r4, r4, #2
 800335a:	2600      	movs	r6, #0
 800335c:	42a6      	cmp	r6, r4
 800335e:	d109      	bne.n	8003374 <__libc_init_array+0x24>
 8003360:	4d0b      	ldr	r5, [pc, #44]	; (8003390 <__libc_init_array+0x40>)
 8003362:	4c0c      	ldr	r4, [pc, #48]	; (8003394 <__libc_init_array+0x44>)
 8003364:	f000 f820 	bl	80033a8 <_init>
 8003368:	1b64      	subs	r4, r4, r5
 800336a:	10a4      	asrs	r4, r4, #2
 800336c:	2600      	movs	r6, #0
 800336e:	42a6      	cmp	r6, r4
 8003370:	d105      	bne.n	800337e <__libc_init_array+0x2e>
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	f855 3b04 	ldr.w	r3, [r5], #4
 8003378:	4798      	blx	r3
 800337a:	3601      	adds	r6, #1
 800337c:	e7ee      	b.n	800335c <__libc_init_array+0xc>
 800337e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003382:	4798      	blx	r3
 8003384:	3601      	adds	r6, #1
 8003386:	e7f2      	b.n	800336e <__libc_init_array+0x1e>
 8003388:	080033f8 	.word	0x080033f8
 800338c:	080033f8 	.word	0x080033f8
 8003390:	080033f8 	.word	0x080033f8
 8003394:	080033fc 	.word	0x080033fc

08003398 <memset>:
 8003398:	4402      	add	r2, r0
 800339a:	4603      	mov	r3, r0
 800339c:	4293      	cmp	r3, r2
 800339e:	d100      	bne.n	80033a2 <memset+0xa>
 80033a0:	4770      	bx	lr
 80033a2:	f803 1b01 	strb.w	r1, [r3], #1
 80033a6:	e7f9      	b.n	800339c <memset+0x4>

080033a8 <_init>:
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033aa:	bf00      	nop
 80033ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ae:	bc08      	pop	{r3}
 80033b0:	469e      	mov	lr, r3
 80033b2:	4770      	bx	lr

080033b4 <_fini>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	bf00      	nop
 80033b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ba:	bc08      	pop	{r3}
 80033bc:	469e      	mov	lr, r3
 80033be:	4770      	bx	lr
